name: Setup Siv3D and build Apps for Linux

inputs:
  siv3d-version:
    description: "Siv3D version used in your project. Example: 0.6.13"
    required: true
  solution-path:
    description: "Path to the solution file relative to the root of the project"
    required: true
  build_configuration:
    description: "Configuration type to build"
    required: false
    default: Release

runs:
  using: "composite"
  steps:
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y ninja-build libasound2-dev libavcodec-dev libavformat-dev libavutil-dev libboost-dev libcurl4-openssl-dev libgtk-3-dev libgif-dev libglu1-mesa-dev libharfbuzz-dev libmpg123-dev libopencv-dev libopus-dev libopusfile-dev libsoundtouch-dev libswresample-dev libtiff-dev libturbojpeg0-dev libvorbis-dev libwebp-dev libxft-dev uuid-dev xorg-dev
        mkdir -p temp
      shell: bash

    - name: Cache Siv3D
      id: cache-siv3d
      uses: actions/cache@v3
      with:
        path: "./temp/OpenSiv3D-${{ inputs.siv3d-version }}"
        key: siv3d-${{ inputs.siv3d-version }}

    - name: Download Siv3D
      if: steps.cache-siv3d.outputs.cache-hit != 'true'
      working-directory: ./temp
      run: |
        wget https://github.com/Siv3D/OpenSiv3D/archive/refs/tags/v${{ inputs.siv3d-version }}.tar.gz
        tar xvzf v${{ inputs.siv3d-version }}.tar.gz
      shell: bash

    - name: Configure Siv3D
      working-directory: ./temp/OpenSiv3D-${{ inputs.siv3d-version }}/Linux
      run: |
        mkdir build && cd build
        cmake -GNinja -DCMAKE_BUILD_TYPE=RelWithDebInfo ..
      shell: bash

    - name: Build Siv3D
      working-directory: ./temp/OpenSiv3D-${{ inputs.siv3d-version }}/Linux
      run: |
        cmake --build build
      shell: bash

    - name: Install Siv3D
      working-directory: ./temp/OpenSiv3D-${{ inputs.siv3d-version }}/Linux
      run: |
        sudo cmake --install build
      shell: bash

    - name: Configure
      run: |
        cd ${{ inputs.solution-path }}
        mkdir build && cd build
        cmake -GNinja -DCMAKE_BUILD_TYPE=RelWithDebInfo ..
      shell: bash

    - name: Build
      run: |
        cd ${{ inputs.solution-path }}
        cmake --build build
      shell: bash
